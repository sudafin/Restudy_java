package com.day5;

/*
    ①abstract：a、不能被new实例化,也没有实体 eg:；public abstract void test();没有{}；
               b、只能修饰方法和类，不能修饰属性；是可以有静态方法和属性的
               c、要修饰方法时，类必须也被修饰；而类被修饰时，方法可以不是抽象
               d、如果一个类继承了抽象类，那么这个类要实现这个抽象类的所有方法，或者将这个类也设为抽象类
                 （实现就是重写只是实现的目标是没有实体，而重写是有实体的）
               e、抽象方法不能使用private、static，final，这三种关键字是与重写起冲突的
               f、抽象模板模式TestTemple
     ②interface：
           a、包含属性和方法，方法默认是抽象的，也就是说没有实体，但可以用default和static去修饰方法让他有实体,且没有构造器；
           b、要实现接口就得就class implement interface，且必须实现接口里的抽象方法（或者该类是抽象的）,且是public方法
           c、一个类可以实现多个接口，一个接口可以继承多个接口
           d、接口中的属性是 public static final ....的且必须初始化，也就是其他类可以直接通过接口名.属性名访问值
           e、接口的修饰符只能是public 和 默认，这跟类一致
           f、TestInterface
           g、也有动态绑定  接口名 引用名 = new 实现对象类();
      ③、内部类和外部类（类的五大成员：属性、方法，构造器，代码块，内部类）
         分类：定义在外部类的局部位置上（方法或代码块上）--局部内部类（有类名） 匿名内部类（没有类名）
              定义在外部类的成员位置上--成员内部类（没用static修饰） 静态内部类（用static修饰）
        一、局部内部类：
        a、可以直接访问外部类的所有成员，包含私有；可以使用final去修饰这个类
        b、作用域仅存在于它的方法或代码块；在本类中的外部类要访问内部类，需要在本方法或代码块上创建内部类对象然后直接调用，
           但在主函数（外部类）则需要调用方法，不能直接在外部其他类创建内部类
        e、如果内部类的成员与外部类的成员名一样，外部类需要 外部类.this.成员名；
        f、LocalInner
        二、匿名内部类（重点）
         a、其他跟局部内部类一样；
         b、用法是对于抽象，接口、普通类的重写或实现，只会允许一次的类
         e、AnonymousInner
        三、成员内部类
        a、可以访问外部类的所有成员，可以被protected，private，public修饰
        b、MemberInner
        四、静态内部类
        a、不可以访问非静态的成员
        b、StaticInner
     ④enum：a、意义是让构造器private化，不去人为修改数据 eg:enum test{常量名(实列表 ;}
            b、必须大写，且放在类的最顶上 有参构造器 eg：常量名(实列表) 无参 常量名
            c、如有多个用逗号隔开。最后用；
            e、本质是继承了一个类，所以不能再继承类，但可以实现接口
            f、Enumeration
*/

public class day5 {
    public static void main(String[] args) {
        System.out.println();
    }
}
