package com.day9;
@SuppressWarnings({"all"})
/**
 *  一、反射
 *     ①优点：可以动态的创建和使用对象(也是框架底层核心)。使用灵活，没有反射机制，框架技术就失去底层支撑；
 *       缺点：使用反射基本是解释执行，对执行速度有影响；
 *       优化：使用setAccessible()方法，其作用是是启动和禁用访问安全检查的开关；如果为true表示反射对象在使用
 *            时取消访问检查，提高反射效率。false表示反射的对象执行访问检查
 *      ②Class类：
 *         a、Class也是类，继承了Object； b、Class类对象是不是new出来的，而是系统创建的；
 *         c、对于某个类的Class类对象，在内存中只有一份，因为类只加载一次；
 *         d、每个类的实例都会记得自己是由哪个Class实例所生成；
 *         e、Class对象是存放在堆中的；类的字节码二进制数据，是放在方法区的，有的地方成为类的元数据
 *         f、Class类的方法：dataType1.png
 *      ③ 静态加载：编译时加载相关的类，如果没有则报错，依赖性太强；(直接new 对象)
 *        动态加载：运行时加载需要的类，如果运行时不用该类，则不报错，降低依赖性;(用Class创建对象)
 */
public class day9 {

}
